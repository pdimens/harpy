#! /usr/bin/env python3

import argparse
import os
import re

# Read in some command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("-f", "--input_file", type=str, help="Sample information file")
parser.add_argument("-d", "--sequence_dir", type=str, default = "RawSeq", help="Location of raw sequences")
parser.add_argument("-s", "--sample_column", type=int, default = 2, help="Sample name column")
parser.add_argument("-i", "--index_column", type=int, default = 2, help="Index ID column")
args = parser.parse_args()

# Function for autovivification of nested python dictionaries:
# https://stackoverflow.com/questions/635483/what-is-the-best-way-to-implement-nested-dictionaries?noredirect=1&lq=1
class Vividict(dict):
    def __missing__(self, key):
        value = self[key] = type(self)()
        return value

# Create empty dict for storing the data
yaml_dict = Vividict()
yaml_dict['samples']

with open(args.input_file) as SAMPLE:
    for line in SAMPLE:
        fields = re.split('\t|\s|,', line.rstrip())
        yaml_dict['samples'][fields[0]][fields[args.sample_column - 1]]['name']  = fields[args.sample_column - 1]
        yaml_dict['samples'][fields[0]][fields[args.sample_column - 1]]['index'] = fields[args.index_column - 1]
SAMPLE.close()

outfile = os.path.splitext(args.input_file)[0]

with open(outfile + ".yaml", mode = "w") as OUT:
    OUT.write('{0!s} {1!s}\n'.format("# generated by HARPY from", args.input_file))
    OUT.write('{0!s} {1!s}\n'.format("seq_directory:", args.sequence_dir))
    OUT.write('{0!s}\n'.format("samples:"))
    for file in yaml_dict['samples']:
        #OUT.write('  {0!s}{1!s}\n'.format(file, ":"))
        for sample in yaml_dict['samples'][file]:
            OUT.write('  {0!s}{1!s}\n'.format(yaml_dict['samples'][file][sample]['name'], ":"))
            OUT.write('    {0!s} {1!s}\n'.format("name:", yaml_dict['samples'][file][sample]['name']))
            OUT.write('    {0!s} {1!s}\n'.format("index:", yaml_dict['samples'][file][sample]['index']))
            OUT.write('    {0!s} {1!s}\n'.format("source:", file))
OUT.close()