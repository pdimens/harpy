name: Test Harpy Modules

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - main

# Cancel in progress workflows on pull_requests.
# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CACHE_NUMBER: 0  # increase to reset cache manually

jobs:
  changes:
    name: Detect File Changes
    runs-on: ubuntu-latest
      # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      validate: ${{ steps.filter.outputs.validate }}
      deconvolve: ${{ steps.filter.outputs.deconvolve }}
      demux: ${{ steps.filter.outputs.demux }}
      qc: ${{ steps.filter.outputs.qc }}
      bwa: ${{ steps.filter.outputs.bwa }}
      ema: ${{ steps.filter.outputs.ema }}
      strobealign: ${{ steps.filter.outputs.strobealign }}
      mpileup: ${{ steps.filter.outputs.mpileup }}
      freebayes: ${{ steps.filter.outputs.freebayes }}
      leviathan: ${{ steps.filter.outputs.leviathan }}
      naibr: ${{ steps.filter.outputs.naibr }}
      impute: ${{ steps.filter.outputs.impute }}
      phase: ${{ steps.filter.outputs.phase }}
      simvars: ${{ steps.filter.outputs.simvars }}
      simreads: ${{ steps.filter.outputs.simreads }}
      assembly: ${{ steps.filter.outputs.assembly }}
      other: ${{ steps.filter.outputs.other }}
      convert: ${{ steps.filter.outputs.convert }}
      environments: ${{ steps.filter.outputs.environments }}
      modules: ${{ steps.filter.outputs.modules }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check Which Files Have Changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: 'main'
          filters: .github/filters.yml

  containerize:
    needs: changes
    name: Rebuild Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
      - name: Clear Space
        uses: jlumbroso/free-disk-space@main
      - name: Rebuild Dockerfile
        id: rebuild
        if: ${{ needs.changes.outputs.environments == 'true' }}
        shell: micromamba-shell {0}
        run: harpy containerize
      - name: Set up Docker Buildx
        id: buildx
        if: ${{ steps.rebuild.outcome == 'success' }}
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        id: dockerhub
        if: ${{ steps.buildx.outcome == 'success' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push to Dockerhub
        if: ${{ steps.dockerhub.outcome == 'success' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: pdimens/harpy:latest
#      - name: Pull Image Locally
#        id: singularity
#        shell: micromamba-shell {0}
#        if: ${{ needs.changes.outputs.modules == 'true' }}
#        run: |
#          export APPTAINER_TMPDIR=$PWD/test/
#          harpy qc --skip-reports --quiet 2 test/fastq/sample1.*.fq.gz
#      - name: Create Singularity Artifact
#        if: ${{ steps.singularity.outcome == 'success' }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity/*.simg
#          retention-days: 1

  dmux_gen1:
    needs: [changes]
    if: ${{ needs.changes.outputs.demux == 'true' }}
    name: demux gen1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: harpy demultiplex
        shell: micromamba-shell {0}
        run: |
          harpy demultiplex gen1 --quiet 2 --schema test/demux/samples.schema test/demux/Undetermined_S0_L004_R* test/demux/Undetermined_S0_L004_I* && \
          ls -lh Demultiplex

  validate:
    needs: [changes]
    if: ${{ needs.changes.outputs.validate == 'true' }}
    name: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: test validate fastq
        shell: micromamba-shell {0}
        run: |
          harpy validate fastq test/fastq
          ls -lh Validate/fastq
      - name: test validate bam
        if: always()
        shell: micromamba-shell {0}
        run: |
          harpy validate bam --quiet 2 test/bam && \
          ls -lh Validate/bam

  qc:
    needs: [changes]
    if: ${{ needs.changes.outputs.qc == 'true' }}
    name: qc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: harpy qc
        shell: micromamba-shell {0}
        run: |
          harpy qc -x "--low_complexity_filter" --quiet 2 test/fastq && \
          ls -lh  QC
      - name: harpy qc all options
        shell: micromamba-shell {0}
        run: |
          harpy qc -o QC/auto -a auto -d -c 21 40 3 0 --quiet 2 test/fastq && \
          ls -lh QC/auto

  deconvolve:
    needs: [changes]
    if: ${{ needs.changes.outputs.deconvolve == 'true' }}
    name: deconvolve
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: harpy deconvolve
        shell: micromamba-shell {0}
        run: |
          harpy deconvolve --quiet 2 test/fastq && \
          ls -lh Deconvolve
  
  bwa:
    needs: [changes]
    if: ${{ needs.changes.outputs.bwa == 'true' }}
    name: align BWA
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: test bwa
        shell: micromamba-shell {0}
        run: |
          harpy align bwa --quiet 2 -x "-A 2" test/genome/genome.fasta.gz test/fastq && \
          ls -lh Align/bwa

  ema:
    needs: [changes]
    if: ${{ needs.changes.outputs.ema == 'true' }}
    name: align EMA
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: test ema
        shell: micromamba-shell {0}
        run: |
          harpy align ema --quiet 2 --ema-bins 150 test/genome/genome.fasta.gz test/fastq && \
          ls -lh Align/ema

  strobe:
    needs: [changes]
    if: ${{ needs.changes.outputs.strobealign == 'true' }}
    name: align strobe
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: test strobealign
        shell: micromamba-shell {0}
        run: |
          harpy align strobe --quiet 2 test/genome/genome.fasta.gz test/fastq && \
          ls -lh Align/strobealign

  mpileup:
    needs: [changes]
    if: ${{ needs.changes.outputs.mpileup == 'true' }}
    name: mpileup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: snp mpileup
        shell: micromamba-shell {0}
        run: |
          harpy snp mpileup --quiet 2 -r test/positions.bed -x "--ignore-RG" test/genome/genome.fasta.gz test/bam && \
          ls -lh SNP/mpileup
      - name: snp mpileup-pop
        shell: micromamba-shell {0}
        run: |
          harpy snp mpileup --quiet 2 -r test/positions.bed -o SNP/poptest -p test/samples.groups test/genome/genome.fasta.gz test/bam && \
          ls -lh SNP/poptest

  freebayes:
    needs: [changes]
    if: ${{ needs.changes.outputs.freebayes == 'true' }}
    name: freebayes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: snp freebayes
        shell: micromamba-shell {0}
        run: |
          harpy snp freebayes --quiet 2 -r test/positions.bed -x "-g 200" test/genome/genome.fasta.gz test/bam && \
          ls -lh  SNP/freebayes
      - name: snp freebayes-pop
        shell: micromamba-shell {0}
        run: |
          harpy snp freebayes --quiet 2 -r test/positions.bed -o SNP/poptest -p test/samples.groups test/genome/genome.fasta.gz test/bam && \
          ls -lh SNP/poptest

  impute:
    needs: [changes]
    if: ${{ needs.changes.outputs.impute == 'true' }}
    name: impute
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: impute
        shell: micromamba-shell {0}
        run: |
          harpy impute --quiet 2 test/stitch.params test/vcf/test.bcf test/bam
          ls -lh Impute
      - name: impute from vcf
        shell: micromamba-shell {0}
        if: always()
        run: |
          harpy impute --quiet 2 --vcf-samples -o vcfImpute test/stitch.params test/vcf/test.bcf test/bam && \
          ls -lh vcfImpute
      - name: impute one region
        shell: micromamba-shell {0}
        if: always()
        run: |
          harpy impute --quiet 2 --vcf-samples -o regionImpute -r 3L:3000-28110227-1000 test/stitch.params test/vcf/test.bcf test/bam && \
          ls -lh regionImpute

  phase:
    needs: [changes]
    if: ${{ needs.changes.outputs.phase == 'true' }}
    name: phase
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: phase
        shell: micromamba-shell {0}
        run: |
          harpy phase --quiet 2 -x "--max_iter 10001" test/vcf/test.bcf test/bam && \
          ls -lh Phase
      - name: phase with indels
        shell: micromamba-shell {0}
        if: always()
        run: |
          harpy phase --quiet 2 -o phaseindel -r test/genome/genome.fasta.gz test/vcf/test.bcf test/bam && \
          ls -lh phaseindel
      - name: phase from vcf
        shell: micromamba-shell {0}
        if: always()
        run: |
          cp test/bam/sample1.bam test/bam/pineapple.bam && rename_bam.py -d pineapple1 test/bam/pineapple.bam
          harpy phase --quiet 2 --vcf-samples -o phasevcf test/vcf/test.bcf test/bam
          ls -lh phasevcf

  leviathan:
    needs: [changes]
    if: ${{ needs.changes.outputs.leviathan == 'true' }}
    name: sv leviathan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: leviathan
        shell: micromamba-shell {0}
        run: |
          harpy sv leviathan --quiet 2 -m 100 -s 80 80 80 -b 1 -x "-M 2002" test/genome/genome.fasta.gz test/bam && \
          ls -lh SV/leviathan
      - name: leviathan-pop
        if: always()
        shell: micromamba-shell {0}
        run: | 
          harpy sv leviathan --quiet 2 -m 100 -s 80 80 80 -b 1 -o SV/leviathanpop -p test/samples.groups test/genome/genome.fasta.gz test/bam && \
          ls -lh SV/leviathanpop

  naibr:
    needs: [changes]
    if: ${{ needs.changes.outputs.naibr == 'true' }}
    name: sv naibr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: naibr
        shell: micromamba-shell {0}
        run: |
          harpy sv naibr --quiet 2 -o SV/naibr test/genome/genome.fasta.gz test/bam_phased && \
          ls -lh SV/naibr
      - name: naibr pop
        if: always()
        shell: micromamba-shell {0}
        run: |
          harpy sv naibr --quiet 2 -o SV/pop -p test/samples.groups test/genome/genome.fasta.gz test/bam_phased && \
          ls -lh SV/pop
      - name: naibr with phasing
        if: always()
        shell: micromamba-shell {0}
        run: |
          harpy sv naibr --quiet 2 -o SV/phase -v test/vcf/test.phased.bcf test/genome/genome.fasta.gz test/bam && \
          ls -lh SV/phase
      - name: naibr pop with phasing
        if: always()
        shell: micromamba-shell {0}
        run: |
          harpy sv naibr --quiet 2 -o SV/phasepop -v test/vcf/test.phased.bcf -p test/samples.groups test/genome/genome.fasta.gz test/bam && \
          ls -lh SV/phasepop

  simulate_variants:
    needs: [changes]
    if: ${{ needs.changes.outputs.simvars == 'true' }}
    name: simulate variants
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: simulate random snps/indels
        shell: micromamba-shell {0}
        run: |
          harpy simulate snpindel --quiet 2 --snp-count 10 --indel-count 10 -z 0.5  test/genome/genome.fasta.gz
          ls -lh Simulate/snpindel
          harpy simulate snpindel --quiet 2 --prefix Simulate/snpvcf --snp-vcf Simulate/snpindel/haplotype_1/sim.hap1.snp.vcf --indel-vcf Simulate/snpindel/haplotype_1/sim.hap1.indel.vcf test/genome/genome.fasta.gz && \
          ls -lh Simulate
      - name: simulate inversions
        shell: micromamba-shell {0}
        if: always()
        run: |
          harpy simulate inversion --quiet 2 --count 10 -z 0.5 test/genome/genome.fasta.gz
          ls -lh Simulate/inversion
          harpy simulate inversion --quiet 2 --prefix Simulate/invvcf --vcf Simulate/inversion/haplotype_1/sim.hap1.inversion.vcf test/genome/genome.fasta.gz && \
          ls -lh Simulate
      - name: simulate cnv
        shell: micromamba-shell {0}
        if: always()
        run: |
          harpy simulate cnv --quiet 2 --count 10 -z 0.5 test/genome/genome.fasta.gz
          ls -lh Simulate/cnv
          harpy simulate cnv --quiet 2 --prefix Simulate/cnvvcf --vcf Simulate/cnv/haplotype_1/sim.hap1.cnv.vcf test/genome/genome.fasta.gz && \
          ls -lh Simulate
      - name: simulate translocations
        shell: micromamba-shell {0}
        if: always()
        run: |
          harpy simulate translocation --quiet 2 --count 10 -z 0.5 test/genome/genome.fasta.gz
          ls -lh Simulate/translocation
          harpy simulate translocation --quiet 2 --prefix Simulate/transvcf --vcf Simulate/translocation/haplotype_1/sim.hap1.translocation.vcf test/genome/genome.fasta.gz && \
          ls -lh Simulate
  simulate_linkedreads:
    needs: [changes]
    if: ${{ needs.changes.outputs.simreads == 'true' }}
    name: simulate linkedreads
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: simulate linked reads (random barcodes)
        shell: micromamba-shell {0}
        run: |
          harpy simulate linkedreads -t 4 --coverage 3 --quiet 2 18,96 test/genome/genome*.fasta.gz && \
          ls -lh Simulate/linkedreads
      - name: simulate linked reads (known barcodes)
        shell: micromamba-shell {0}
        run: |
          haplotag_acbd.py .
          cut -f2 segment_A.bc > hap.bc
          harpy simulate linkedreads -t 4 --coverage 3 --quiet 2 hap.bc test/genome/genome*.fasta.gz && \
          ls -lh Simulate/linkedreads

  assembly:
    needs: [changes]
    if: ${{ needs.changes.outputs.assembly == 'true' }}
    name: assembly
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
#      - name: Download Singularity Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: deps-image
#          path: .snakemake/singularity
      - name: test assembly
        shell: micromamba-shell {0}
        run: |
          harpy assembly --quiet 2 -r 4000 test/fastq/sample1.* && \
          ls -lh Assembly
      - name: test metassembly
        shell: micromamba-shell {0}
        run: |
          harpy metassembly --quiet 2 -r 4000 test/fastq/sample1.* && \
          ls -lh Metassembly
      - name: test metassembly without barcodes
        shell: micromamba-shell {0}
        run: |
          harpy metassembly --ignore-bx --quiet 2 -r 4000 test/fastq/sample1.* && \
          ls -lh Metassembly

  other:
    needs: [changes]
    if: ${{ needs.changes.outputs.other == 'true' }}
    name: harpy other
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
#     - name: Clear Space
#       uses: jlumbroso/free-disk-space@main
      - name: harpy template impute
        shell: micromamba-shell {0}
        run: harpy template impute
      - name: harpy template groupings
        shell: micromamba-shell {0}
        run: harpy template groupings test/fastq
      - name: harpy downsample bam
        shell: micromamba-shell {0}
        run: harpy downsample -d 10 --random-seed 699 --quiet 2 test/bam/sample1.bam && ls -lh Downsample
      - name: harpy downsample fastq
        shell: micromamba-shell {0}
        run: harpy downsample -d 10 --quiet 2 test/fastq/sample1.*gz && ls -lh Downsample
      - name: harpy hpc
        shell: micromamba-shell {0}
        run: |
          harpy template hpc-slurm
          harpy template hpc-googlebatch
          harpy template hpc-lsf
          harpy template hpc-generic

  convert:
    needs: [changes]
    if: ${{ needs.changes.outputs.convert == 'true' }}
    name: harpy convert
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Mamba
        uses: mamba-org/setup-micromamba@v2
        env:
          ACTIONS_STEP_DEBUG: true
        with:
          init-shell: bash
          generate-run-shell: true
          environment-file: resources/harpy.yaml
          cache-environment: true
          post-cleanup: 'all'
          log-level: error
      - name: Install Harpy
        shell: micromamba-shell {0}
        run: |
          python3 -m pip install --upgrade build && python3 -m build
          pip install dist/*.whl
          resources/buildforCI.sh
      - name: convert haplotag to stlfr
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert/stlfr haplotagging stlfr test/fastq/sample1.*gz
      - name: convert haplotag to tellseq
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert/tellseq haplotagging tellseq test/fastq/sample1.*gz
      - name: convert haplotag to 10x
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert/10x haplotagging 10x test/fastq/sample1.*gz
      - name: convert stlfr to haplotag
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_stlfr/haptag stlfr haplotagging convert/stlfr.*gz
      - name: convert stlfr to tellseq
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_stlfr/tellseq stlfr tellseq convert/stlfr.*gz
      - name: convert stlfr to 10x
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_stlfr/10x stlfr 10x convert/stlfr.*gz
      - name: convert stlfr to standard
        shell: micromamba-shell {0}
        run: |
          harpy convert fastq --quiet 2 -o convert_stlfr/standard stlfr standard convert/stlfr.*gz
          rm -rf convert_stlfr
      - name: convert tellseq to 10x
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_tellseq/10x tellseq 10x convert/tellseq.*gz
      - name: convert tellseq to stlfr
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_tellseq/stlfr tellseq stlfr convert/tellseq.*gz
      - name: convert tellseq to haplotag
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_tellseq/haptag tellseq haplotagging convert/tellseq.*gz
      - name: convert tellseq to standard
        shell: micromamba-shell {0}
        run: |
          harpy convert fastq --quiet 2 -o convert_tellseq/standard tellseq standard convert/tellseq.*gz
          rm -rf convert_tellseq
      - name: convert standard to 10x
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_standard/10x standard 10x test/fastq/sample1.*gz
      - name: convert standard to stlfr
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_standard/stlfr standard stlfr test/fastq/sample1.*gz
      - name: convert standard to tellseq
        shell: micromamba-shell {0}
        run: |
          harpy convert fastq --quiet 2 -o convert_standard/haptag standard tellseq test/fastq/sample1.*gz
          rm -rf convert_standard
      - name: convert 10x to standard
        shell: micromamba-shell {0}
        run: |
          cut -f2 convert/10x.bc | grep -v "N" > 10x.barcodes
          harpy convert fastq --quiet 2 -o convert_10x/standard -b 10x.barcodes 10x standard convert/10x*gz
      - name: convert 10x to haplotagging
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_10x/haptag -b 10x.barcodes 10x haplotagging convert/10x*gz
      - name: convert 10x to tellseq
        shell: micromamba-shell {0}
        run: harpy convert fastq --quiet 2 -o convert_10x/tellseq -b 10x.barcodes 10x tellseq convert/10x*gz
      - name: convert 10x to stlfr
        shell: micromamba-shell {0}
        run: |
          harpy convert fastq --quiet 2 -o convert_10x/stlfr -b 10x.barcodes 10x stlfr convert/10x*gz
          rm -rf convert_10x

      - name: convert BAM haplotagging to tellseq
        shell: micromamba-shell {0}
        run: |
          harpy convert bam --quiet 2 tellseq test/bam/sample1.bam > tellseq.bam
          samtools view tellseq.bam | head -3
      - name: convert BAM haplotagging to stlfr
        shell: micromamba-shell {0}
        run: |
          harpy convert bam --quiet 2 stlfr test/bam/sample1.bam > stlfr.bam
          samtools view stlfr.bam | head -3
      - name: convert BAM stlfr to haplotagging
        shell: micromamba-shell {0}
        run: harpy convert bam --quiet 2 haplotagging stlfr.bam | samtools view | head -3
      - name: convert BAM stlfr to tellseq
        shell: micromamba-shell {0}
        run: harpy convert bam --quiet 2 tellseq stlfr.bam | samtools view | head -3
      - name: convert BAM tellseq to haplotagging
        shell: micromamba-shell {0}
        run: harpy convert bam --quiet 2 haplotagging tellseq.bam | samtools view | head -3
      - name: convert BAM tellseq to stlfr
        shell: micromamba-shell {0}
        run: harpy convert bam --quiet 2 stlfr tellseq.bam | samtools view | head -3
