---
title: "BAM Haplotag Format Check"
brand:
  logo: 
    medium: https://raw.githubusercontent.com/pdimens/harpy/docs/static/logo_navbar.png
execute:
    echo: false
    warning: false
embed-resources: true
format: 
  dashboard:
    theme: materia
    scrolling: true
    expandable: false
    logo: https://raw.githubusercontent.com/pdimens/harpy/docs/static/logo_navbar.png
    nav-buttons:
      - icon: book-half
        href: https://pdimens.github.io/harpy
      - icon: bug
        href: https://github.com/pdimens/harpy/issues/new/choose
      - icon: code-slash
        href: https://github.com/pdimens/harpy
params:
  infile: 'test.tsv'
---
_`r format(Sys.time(), 'üóìÔ∏è %d %B, %Y üïî %H:%M')`_

```{r package_imports}
using<-function(...) {
    libs<-unlist(list(...))
    req<-unlist(lapply(libs,require,character.only=TRUE))
    need<-libs[req==FALSE]
    if(length(need)>0){ 
        install.packages(need, repos = "https://cloud.r-project.org/")
        lapply(need,require,character.only=TRUE)
    }
}
using("dplyr","tidyr","DT","scales")
```

```{r read_inputs}
infile <- params$infile
data <- read.table(infile, header = T)
attention_df <- data %>% select(-1,-2) %>% rowwise() %>% summarise(count = sum(c(nameMismatch, noBX, badBX)))
attention <- sum(attention_df$count > 0)
noMItag <- sum(data$noMI == data$alignments)
noBXtag <- sum(data$noBX == data$alignments)
bxnotlast <- sum(data$bxNotLast > 0)
```
# File Checks
<h1> Preflight checks for BAM files </h1>

This report reflects the BAM files Harpy processed to identify obvious
[formatting issues](#details) that may require your attention.

## valueboxes
```{r}
#| content: valuebox
#| title: "Alignment Files"
list(
  icon = "files",
  color = "light",
  value = scales::comma(nrow(data))
)
```

```{r}
#| content: valuebox
#| title: "Files With Issues"
list(
  icon = ifelse(attention > 0, "exclamation-triangle", "check2-square"),
  color = ifelse(attention > 0, "warning", "success"),
  value = scales::comma(attention)
)
```

```{r}
#| content: valuebox
#| title: "No BX Tag"
list(
  icon = ifelse(noMItag > 0, "exclamation-triangle", "check2-square"),
  color = ifelse(noMItag > 0, "warning", "success"),
  value = scales::comma(noBXtag)
)
```

```{r}
#| content: valuebox
#| title: "No MI Tag"
list(
  icon = ifelse(noMItag > 0, "exclamation-triangle", "check2-square"),
  color = ifelse(noMItag > 0, "warning", "success"),
  value = scales::comma(noMItag)
)
```

```{r}
#| content: valuebox
#| title: "BX Tag Not Last"
list(
  icon = ifelse(bxnotlast > 0, "exclamation-triangle", "check2-square"),
  color = ifelse(bxnotlast > 0, "warning", "success"),
  value = scales::comma(bxnotlast)
)
```

## viz desc

| column           | üü¶ pass condition üü¶                                                               | üü® fail condition üü®                                    |
| :--------------- | :--------------------------------------------------------------------------------- | :-------------------------------------------------------- |
| **Name Mismatch**   | the file name matches the `@RG ID:` tag in the header                              | file name does not match `@RG ID:` in the header          |
| **MI tag**       | **any** alignments with `BX:Z` tag also have `MI`                                  | **all** reads have `BX:Z` tag present but `MI` tag absent |
| **BX:Z tag**     | **any** `BX:Z` tags present                                                        | **all** alignments lack `BX:Z` tag                        |
| **BX:Z last**    | **all** reads have `BX:Z` as final tag in alignment records                        | **any** `BX:Z` barcodes have incorrect format             |
| **AxxCxxBxxDxx** | **all** alignments with `BX:Z` tag have properly formatted `AxxCxxBxxDxx` barcodes | **at least 1 read** doesn't have `BX:Z` tag as final tag  |

## file stats
```{r resultstable}
#| title: "File Stats"

datatable(
  data,
  escape = F,
  rownames = F,
  filter = "top",
  extensions = 'Buttons',
  options = list(
    paging = F,
    scrollX = F,
    dom = 'Brtp',
    buttons = list(list(extend = "csv",filename = "bam_checks"))
  ),
  fillContainer = T,
  colnames = c("File", "Reads", "Name Mismatch", "MI tag", "BX:Z tag", "BX:Z last", "AxxCxxBxxDxx")
) %>%
formatStyle(
  columns = 3:ncol(data),
  # Blue for values <= 0, yellow for values > 0
  backgroundColor = styleInterval(0, c('#4faad1', '#feda75'))
) %>%
formatStyle(
  columns = 2,
  # yellow for values == 0, blue for values > 0
  backgroundColor = styleInterval(0, c('#feda75', '#4faad1'))
)
```

# Details
## interpret
::: {.card title="Interpreting the Data"}

The `harpy preflight bam ...` command created a `filecheck.bam.tsv` file in the specified
output directory that summarizes the results that are included in this report.
This file contains a tab-delimited table with the columns: `file`,	`nameMismatch`, `alignments`,	`noBX`, and	`badBX`.
These columns are defined below and the severities of their issues are given as colored emoji:

- ‚¨ú is minor
- üî∂ is moderate
- üõë is critical

file
: The name of the BAM file

nameMismatch üõë
: The sample name of the file inferred from name of the file (i.e. Harpy assumes `sample1.bam` to be `sample1`) does not match the `@RG ID` tag in the alignment file.

alignments
: The total number of alignment records in the file

noMI üõë
: Alignment records lack `MI` tag (`MI:i` or `MI:Z`)

noBX ‚¨ú
: The number of alignments that do not have a `BX:Z` tag in the record
If you expect all or some of your reads should have `BX:Z` tags, then further investigation is necessary

badBX üõë
: The haplotag barcode in the `BX:Z` tag does not adhere to the proper `AxxCxxBxxDxx` format

bxNotLast üî∂
: The `BX:Z` tag in the alignment record is not the last tag
Only relevant for LEVIATHAN variant calling and can be ignored if not intending to call
structural variants with LEVIATHAN,otherwise the `BX:Z` tag must be the last comment in an alignment
record. `harpy align` will automatically move the `BX:Z` tag to the end of the alignment record.
:::

### Proper format {.no-title}
::: {.card title="Proper BAM format"}

BX Tag
: A proper linked-read alignment file will contain a `BX:Z` tag with an alignment record
that features a properly-formatted haplotag barcode `AxxCxxBxxDxx`. If this barcode is not in that
format, then it's likely the input FASTQ used for read mapping is the source of the
issue. You can check those FASTQ files for errors with `harpy preflight fastq`. 

: Example Alignment Record
Below is an example of a proper alignment record for a file named `sample1.bam`.
Note the tag `RG:Z:sample1`, indicating this alignment is associated with `sample1` and
matches the file name. Also note the correctly formatted haplotag barcode `BX:Z:A19C01B86D78`
and the presence of a `MI:` tag. To reduce horizontal scrolling, the alignment sequence and Phred
scores have been replaced with `SEQUENCE` and `QUALITY`, respectively.

```
A00814:267:HTMH3DRXX:2:1132:26268:10316 113     contig1 6312    60      4S47M1D86M      =       6312    0       SEQUENCE  QUALITY     NM:i:2  MD:Z:23C23^C86  MC:Z:4S47M1D86M AS:i:121        XS:i:86 RG:Z:sample1   MI:i:4040669       RX:Z:GAAACGATGTTGC+CCTAAGCCGAATC        QX:Z:FFFFFFFFFFFFF+FFFFF:FFFFFFF    BX:Z:A19C01B86D78
```

:::