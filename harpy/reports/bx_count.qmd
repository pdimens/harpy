---
title: "Haplotagging QC Bardcode Summary"
params:
  indir: 'logs/bxcount'
---
`r format(Sys.time(), 'üóìÔ∏è %d %B, %Y üïî %H:%M')`

```{r package_imports}
using<-function(...) {
    libs<-unlist(list(...))
    req<-unlist(lapply(libs,require,character.only=TRUE))
    need<-libs[req==FALSE]
    if(length(need)>0){ 
        install.packages(need, repos = "https://cloud.r-project.org/")
        lapply(need,require,character.only=TRUE)
    }
}
using("dplyr","tidyr","DT","highcharter","scales")
```
# Overview
##
<h2> General Per-Sample Haplotagging Barcode Statistics </h2>

This report details the counts of valid and invalid haplotagging barcodes in the 
sample read headers. The correct haplotagging format is `BX:Z:AXXCXXBXXDXX`, where 
there is a tab before (and possible after) `BX:Z` and `XX` are 2-digit numbers
between `00` and `96`. A valid FASTQ read header would then look like:

```         
@A00814:267:HTMH3DRXX:2:1101:4580:1000 BX:Z:A02C01B11D46        RX:Z:GAAACGACCAACA+CGAACACGTTAGC   QX:Z:F,FFFFFFFFFFF+FF,FFF:FFFFFF
```

Notably, only the sequence ID (`@...`) and `BX:Z:` tag are required. 
In the example above, there are additional tags (`RX:Z` and `QX:Z`) 
which arent used by Harpy, but they conform to the 
[SAM comment spec (section 1.5)](https://samtools.github.io/hts-specs/SAMv1.pdf) 
of `TAG:TYPE:VALUE`. The takeaway is that the `BX:Z` tag can be anywhere\* in the 
read header after the sequence ID as long as any tags after it conform to the 
SAM spec `TAG:TYPE:VALUE`. 

| \*The Levaithan structural variant caller requires the `BX:Z` tag to be the final tag in an alignment record, which `harpy align` does automatically |
| :---:|

```{r instantiate_df}
BXstats <- data.frame(
  Sample = character(),
  TotalReads = integer(),
  TotalBarcodes = integer(),
  ValidBarcodes = integer(),
  ValidPercent = numeric(),
  InvalidBarcodes = integer(),
  InvalidPercent = numeric()
)

invalids <- data.frame(
  Sample = character(),
  A = integer(),
  C = integer(),
  B = integer(),
  D = integer()
)
```

```{r fill_df}
indir <- params$indir
#indir <- "/home/pdimens/Documents/harpy/QC/logs/bxcount"

for (i in list.files(indir, ".count.log", full.names = TRUE)) {
  samplename <- gsub(".count.log", "", basename(i))
  s_df <- read.table(i, header = F)
  total <- s_df$V2[1]
  bc_total <- s_df$V2[2]
  bc_ok <- s_df$V2[3]
  bc_invalid <- s_df$V2[4]
  if (bc_total == 0) {
    bc_percent <- 0
    ig_percent <- 0
  } else {
    bc_percent <- round((bc_ok / bc_total) * 100, digits = 3)
    ig_percent <- round((bc_invalid / bc_total) * 100, digits = 3)
  }

  BXstats <- rbind(
    BXstats,
    data.frame(
      Sample = samplename,
      TotalReads = total,
      TotalBarcodes = bc_total,
      ValidBarcodes = bc_ok,
      ValidPercent = bc_percent,
      InvalidBarcodes = bc_invalid,
      InvalidPercent = ig_percent
      )
  )
  invalids <- rbind(
    invalids,
    data.frame(
      Sample = samplename,
      TotalBarcodes = bc_total,
      A = s_df$V2[5],
      C = s_df$V2[6],
      B = s_df$V2[7],
      D = s_df$V2[8]
    )
  )
}

figheight <- 3 + (0.6 * nrow(BXstats))
```

##
```{r}
#| content: valuebox
#| title: "Samples"
list(
  icon = "files",
  color = "light",
  value = prettyNum(nrow(BXstats), big.mark = ",")
)
```

```{r}
#| content: valuebox
#| title: "Min % Valid"
list(
  icon = "check2-circle",
  color = "#dde6d5",
  value = min(BXstats$ValidPercent)
)
```

```{r}
#| content: valuebox
#| title: "Max % Valid"
list(
  icon = "check2-circle",
  color = "#dde6d5",
  value = max(BXstats$ValidPercent)
)
```

```{r}
#| content: valuebox
#| title: "Min BX Absent"
absent <- BXstats$TotalReads-BXstats$TotalBarcodes
list(
  icon = "question-circle",
  color = "#a3b899",
  value = min(absent)
)
```

```{r}
#| content: valuebox
#| title: "Max BX Absent"
list(
  icon = "question-circle",
  color = "#a3b899",
  value = max(absent)
)
```


## persamp
###
::: {.card}
<h3> General Per-Sample haplotagging Barcode Statistics </h3>

Below is a table listing all the samples Harpy processed and their associated
haplotagging barcode statistics as determined by the reads in the **forward read only**.
If for some reason `TotalBarcodes` equals `0`, then there may be an issue with
the format of your FASTQ headers.

```{r per_sample_tables}
plotdata <- BXstats %>%
  select(Sample, ValidBarcodes, InvalidBarcodes) %>% 
  rename(Valid = ValidBarcodes, Invalid = InvalidBarcodes)

percdata <- BXstats %>%
  select(Sample, ValidPercent, InvalidPercent) %>% 
  rename(Valid= ValidPercent, Invalid = InvalidPercent)
```

```{r sample_bx_qual}
column_description <- c(
  "name of the sample",
  "total number of reads",
  "total number of barcodes present",
  "number of valid haplotagging barcodes",
  "percent of haplotagging barcodes that are valid",
  "number of invalid haplotagging barcodes, i.e. with a 00 segment",
  "percent of haplotagging barcodes that are invalid"
  )

headerCallback <- c(
  "function(thead, data, start, end, display){",
  paste0(" var tooltips = ['", paste(column_description, collapse = "','"), "'];"),
  "  for(var i=0; i<tooltips.length; i++){",
  "    $('th:eq('+i+')',thead).attr('title', tooltips[i]);",
  "  }",
  "}"
)

DT::datatable(
  BXstats,
  rownames = FALSE,
  filter = "top",
  extensions = "Buttons",
  caption = "Overall barcode quality per sample",
  fillContainer = T,
  options = list(
    dom = "Brtp",
    buttons = c("csv"),
    scrollX = TRUE,
    headerCallback = JS(headerCallback)
  )
)
```
:::

# General Invalidations
## table desc
<h2> Percent Beadtag Segment Invalidations </h2>
Below is information describing segment invalidations across all **forward reads**
within samples. The term "segments" refers to the combinatorial `Axx`, `Bxx`, 
`Cxx`, `Dxx` segments that make up a complete `AxxCxxBxxDxx` haplotagging barcode.

##
###
```{r invalid_segment_processing}
invalids_percent <- data.frame(
  Sample = as.factor(invalids$Sample),
  A = round(invalids$A/invalids$TotalBarcodes * 100, digits = 3),
  C = round(invalids$C/invalids$TotalBarcodes * 100, digits = 3),
  B = round(invalids$B/invalids$TotalBarcodes * 100, digits = 3),
  D = round(invalids$D/invalids$TotalBarcodes * 100, digits = 3)
)
invalids_long <- pivot_longer(invalids_percent, -1, names_to = "Segment", values_to = "Count")
invalids_long$Segment <- as.factor(paste0("segment " , invalids_long$Segment))
```

::: {.card}
This plot shows the distribution of percent invalid beadtag segments
across all samples. This should help you assess whether some segments have a 
higher incidence of failure than others. The darker horizontal lines within each
violin plot indicate the 25th, 50th (median), 75th percentiles in ascending order
from the bottom of the plot. The grey point in each violin plot is the mean and
the vertical grey lines emerging from it are the standard deviation. 

```{r invalid_segment_dist}
inv_hist <- data.frame(Segment = character(), Bin = numeric(), Count = numeric())
inv_breaks <- hist(invalids_long$Count, plot = F)
inv_breaks <- inv_breaks$breaks
for(j in c("A", "B","C","D")){
  h <- hist(invalids_percent[, j], inv_breaks, plot = F)
  segment <- paste0("segment ", j)
  inv_hist <- rbind(inv_hist, data.frame(Segment = rep(segment, length(inv_breaks)-1), Bin = h$breaks[-1], Count = h$counts))
}

hchart(inv_hist, "areaspline", hcaes(x = Bin, y = Count, group = Segment), stack = "overlap", marker = list(enabled = FALSE)) |>
  hc_colors(c("#4a9fea", "#5a8c84", "#ffd75f", "#df487f")) |>
  hc_title(text = "Distribution of Percent Invalid Beadtag Segments") |>
  hc_xAxis(title = list(text = "Percent Invalid"), type = "linear") |>
  hc_yAxis(title = list(text = "Count")) |>
  hc_tooltip(crosshairs = TRUE, animation = FALSE,
    formatter = JS("function () {return '<b>' + this.series.name + '</b><br><b>' + this.x + '% invalid</b><br/>Count: <b>' + this.y + '</b>';}") 
  ) |>
  hc_exporting(enabled = T, filename = "indel.quality",
    buttons = list(contextButton = list(menuItems = c("downloadPNG", "downloadJPEG", "downloadPDF", "downloadSVG")))
)
```

:::

###
::: {.card}
This table details the number of invalid beadtag segments as a 
percent of total beadtag barcodes within a sample.
It's likely that percentages will have greater diagnostic value than the total counts
because the number of reads and barcodes will vary between individual samples.

```{r invalid_segment_table}
column_description <- c(
  "name of the sample",
  "number of occurrences of invalid \'A\' barcode segment",
  "number of occurrences of invalid \'C\' barcode segment",
  "number of occurrences of invalid \'B\' barcode segment",
  "number of occurrences of invalid \'D\' barcode segment"
  )

headerCallback <- c(
  "function(thead, data, start, end, display){",
  paste0(" var tooltips = ['", paste(column_description, collapse = "','"), "'];"),
  "  for(var i=0; i<tooltips.length; i++){",
  "    $('th:eq('+i+')',thead).attr('title', tooltips[i]);",
  "  }",
  "}"
)

DT::datatable(
  invalids_percent,
  rownames = FALSE,
  extensions = "Buttons",
  fillContainer = T,
  colnames = c("Sample","A", "C","B","D"),
  caption = "Invalid segments relative to total barcodes",
  options = list(
    dom = "Brtp",
    buttons = c("csv"),
    scrollX = TRUE,
    headerCallback = JS(headerCallback)
  )
)
```
:::

# Per-Sample Invalidations
## Segment viz description
<h2> Per-Sample Barcode and Segment Invalidations </h2>
These three visualizations show the occurrence of invalid haplotagging barcodes.
The plot on the left shows this as the count of valid vs. invalid barcodes 
per individual, whereas the plot in the middle shows this in finer detail as
the percent invalid beadtag segments per individual. The plot on the right shows
the proportion of invalid haplotagging barcode segments (A, C, B, or D) per individual.
Together, these three graphs should help you assess if any individuals have an unusually
high amount of barcode invalidations and if any particular beadtag segments appear to be more prone to
failure than others.

## validity plots
### {.flow}
```{r valid_plot, fig.height=figheight}
tb<-plotdata %>%
  pivot_longer(-Sample, names_to = "Barcode", values_to = "Count")

hchart(tb, "bar", hcaes(x = Sample, y = Count, group = Barcode), stacking = "normal") |>
  hc_colors(c("#707070", "#b88ace")) |>
  hc_title(text = "Valid vs Invalid Barcodes") |>
  hc_caption(text = "Given as counts") |>
  hc_xAxis(title = list(text = "")) |>
  hc_yAxis(title = list(text = "count")) |>
  hc_tooltip(crosshairs = TRUE, animation = FALSE) |>
  hc_exporting(enabled = T, filename = "bxcount",
    buttons = list(contextButton = list(menuItems = c("downloadPNG", "downloadJPEG", "downloadPDF", "downloadSVG")))
  )
```

### {.flow}
```{r valid_proportion_plot, fig.height=figheight}
hchart(tb, "bar", hcaes(x = Sample, y = Count, group = Barcode), stacking = "percent") |>
  hc_colors(c("#707070", "#b88ace")) |>
  hc_title(text = "Valid vs Invalid Barcodes") |>
  hc_caption(text = "Given as percents") |>
  hc_xAxis(title = list(text = "")) |>
  hc_yAxis(title = list(text = "percent")) |>
  hc_tooltip(crosshairs = TRUE, animation = FALSE) |>
  hc_exporting(enabled = T, filename = "bxpercent",
    buttons = list(contextButton = list(menuItems = c("downloadPNG", "downloadJPEG", "downloadPDF", "downloadSVG")))
)
```

### {.flow}
```{r invalid_segment_plot, fig.height=figheight}
highchart() |>
  hc_chart(inverted=TRUE) |>
  hc_add_series(data = invalids_long,  type = "scatter", hcaes(x = Sample, y = Count, group = Segment), marker = list(symbol = "circle")) |>
  hc_colors(c("#4a9fea", "#5a8c84", "#ffd75f", "#df487f")) |>
  hc_title(text = "Percent Invalid Beadtag Segments") |>
  hc_xAxis(type = "category", title = list(text = ""), categories = unique(invalids_long$Sample)) |>
  hc_yAxis(title = list(text = "percent invalid"), min = 0, max = 100) |>
  hc_tooltip(crosshairs = TRUE, animation = FALSE,
    formatter = JS("function () {return '<b>' + this.x + '</b><br><b>' + this.series.name + '</b><br/>Percent: <b>' + this.y + '</b>';}") 
  ) |>
  hc_exporting(enabled = T, filename = "invalid.segments",
    buttons = list(contextButton = list(menuItems = c("downloadPNG", "downloadJPEG", "downloadPDF", "downloadSVG")))
)
```